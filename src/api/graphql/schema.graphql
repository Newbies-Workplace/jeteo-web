schema {
    query: Query
    mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
) on SCALAR

type AddressResponse {
    city: String!
    coordinates: CoordinatesResponse
    place: String!
}

type ContactResponse {
    github: String
    linkedin: String
    mail: String
    twitter: String
}

type CoordinatesResponse {
    latitude: Float!
    longitude: Float!
}

input EventFilterInput {
    authorId: String
    visibilityIn: [Visibility!]!
}

input EventRequestInput {
    address: AddressRequestInput
    description: String
    subtitle: String
    tags: [TagRequestInput!]!
    timeFrame: TimeFrameRequestInput!
    title: String!
}

type EventResponse {
    address: AddressResponse
    "Event creator"
    author: UserResponse!
    authorId: String!
    createDate: Instant!
    description: String
    id: String!
    "Is event followed by current user"
    isFollowed: Boolean!
    subtitle: String
    tags: [TagResponse!]!
    theme: ThemeResponse!
    timeFrame: TimeFrameResponse!
    title: String!
    updateDate: Instant!
    vanityUrl: String!
    visibility: Visibility!
}

type LectureResponse {
    author: UserResponse!
    createDate: Instant!
    description: String
    id: String!
    speakers: [UserResponse!]!
    timeFrame: TimeFrameResponse!
    title: String!
    updateDate: Instant!
}

input LectureFilterInput {
    eventId: String!
}

input LectureRequestInput {
    description: String
    speakerIds: [String!]!
    timeFrame: TimeFrameRequestInput!
    title: String!
}

type LectureResponse {
    author: UserResponse!
    createDate: Instant!
    description: String
    id: String!
    speakers: [UserResponse!]!
    timeFrame: TimeFrameResponse!
    title: String!
    updateDate: Instant!
}

type Mutation {
    "Change event visibility"
    changeEventVisibility(id: String!, request: EventVisibilityRequestInput!): EventResponse!
    "Create event with request"
    createEvent(request: EventRequestInput!): EventResponse!
    "Create lecture with request"
    createLecture(eventId: String!, request: LectureRequestInput!): LectureResponse!
    "Creates tag"
    createTag(request: TagCreateRequestInput!): TagResponse!
    "Delete event by id"
    deleteEvent(id: String!): Boolean!
    "Delete lecture by id"
    deleteLecture(id: String!): Boolean!
    "Follow event by id"
    followEvent(id: String!): Boolean!
    "Appends new tags to followed list"
    followTags(request: [TagRequestInput!]!): [TagResponse!]!
    "Replace event data with new data (PUT equivalent)"
    replaceEvent(id: String!, request: EventRequestInput!): EventResponse!
    "Replace event theme with new one (PUT equivalent)"
    replaceEventTheme(id: String!, request: EventThemeRequestInput!): EventResponse!
    "Replace lecture data with new data (PUT equivalent)"
    replaceLecture(id: String!, request: LectureRequestInput!): LectureResponse!
    "Replace user data with new data (PUT equivalent)"
    replaceMyUser(request: UserRequestInput!): UserResponse!
    "Unfollow event by id"
    unfollowEvent(id: String!): Boolean!
    "Removes tags from followed list"
    unfollowTags(request: [TagRequestInput!]!): Boolean!
}

type Query {
    "Get single event by its id"
    event(id: String!): EventResponse!
    "Get all events paged"
    events(filter: EventFilterInput, page: Int, size: Int): [EventResponse!]!
    "Get tags followed by user (paged)"
    followedTags(page: Int, size: Int): [TagResponse!]!
    "Get single lecture by its id"
    lecture(id: String!): LectureResponse!
    "Get all event lectures"
    lectures(filter: LectureFilterInput!): [LectureResponse!]!
    "Get tag by id"
    tag(id: String!): TagResponse
    "Get all tags paged"
    tags(page: Int, size: Int): [TagResponse!]!
    "Get user by id"
    user(id: String!): UserResponse
    "Get all users paged"
    users(page: Int, size: Int): [UserResponse!]!

    # Get single lecture by its id
    lecture(id: String!): LectureResponse!

    # Get all event lectures
    lectures(filter: LectureFilterInput!): [LectureResponse!]!
}

type TagResponse {
    id: String!
    name: String!
}

type ThemeResponse {
    image: String
    primaryColor: String
    secondaryColor: String
}

type TimeFrameResponse {
    finishDate: Instant
    startDate: Instant!
}

type UserResponse {
    contact: ContactResponse!
    createDate: Instant!
    description: String
    id: String!
    nickname: String!
    updateDate: Instant!
}

enum Visibility {
    INVISIBLE
    PRIVATE
    PUBLIC
}

"ISO date-time"
scalar Instant

input AddressRequestInput {
    city: String!
    coordinates: CoordinatesRequestInput
    place: String!
}

input ContactRequestInput {
    github: String
    linkedin: String
    mail: String
    twitter: String
}

input CoordinatesRequestInput {
    latitude: Float!
    longitude: Float!
}

input EventFilterInput {
    authorId: String
    visibilityIn: [Visibility!]!
}

input EventRequestInput {
    address: AddressRequestInput
    description: String
    subtitle: String
    tags: [TagRequestInput!]!
    timeFrame: TimeFrameRequestInput!
    title: String!
}

input EventThemeRequestInput {
    primaryColor: String
    secondaryColor: String
}

input EventVisibilityRequestInput {
    visibility: Visibility!
}

input LectureFilterInput {
    eventId: String!
}

input LectureRequestInput {
    description: String
    speakerIds: [String!]!
    timeFrame: TimeFrameRequestInput!
    title: String!
}

input TagCreateRequestInput {
    name: String!
}

input TagRequestInput {
    id: String!
}

input TimeFrameRequestInput {
    finishDate: Instant
    startDate: Instant!
}

input UserRequestInput {
    contact: ContactRequestInput!
    description: String
    nickname: String!
}